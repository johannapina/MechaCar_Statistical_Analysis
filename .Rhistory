if substr(student,2,length(students)) == "e"{
print(student)
print(sample(33:66,3))
}
print(student)
print(student)
}
second_letter<- substr(students,2,2)
print(student)
print(student)
if (second_letter== "e"){
print(student)
print(sample(33:66,3))
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in students) {
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in students) {
locker_combo <- sample(33,3)
print(student)
print(locker_combo)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
# Create a variable (substring)  that holds the second letter for each student.
# Create an if statement to find the names of students where the
# second letter that is an "e".
for (student in students){
second_letter<- substr(students,2,2)
if (second_letter== "e"){
print(student)
print(sample(33:66,3))
}
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in students) {
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in students) {
locker_combo <- sample(33,3)
print(student)
print(locker_combo)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
# Create a variable (substring)  that holds the second letter for each student.
# Create an if statement to find the names of students where the
# second letter that is an "e".
for (student in students){
second_letter<- substr(students,2,2)
if (second_letter== "e"){
print(student)
print(sample(33:66,3))
}
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in students) {
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in students) {
locker_combo <- sample(33,3)
print(student)
print(locker_combo)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
# Create a variable (substring)  that holds the second letter for each student.
# Create an if statement to find the names of students where the
# second letter that is an "e".
for (student in students){
second_letter<- substr(student,2,2)
if (second_letter== "e"){
print(student)
print(sample(33:66,3))
}
}
?ggplot()
head(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2plt + geom_bar() #plot a bar plot
plt + geom_bar() #plot a bar plot
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
#import dataset into ggplot2
plt + geom_col()
#plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
#plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1))
#rotate the x-axis label 45 degrees
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
> plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
#import dataset into ggplot2
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
#import dataset into ggplot2
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
#import dataset into ggplot2
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
#add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
#add scatter plot with multiple aesthetics
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
<- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
shapiro.test(mtcars$wt)
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plotv
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
sardines <- read.csv(file="../Resources/sardines.csv")
setwd("~/Documents/ucb-virt-data-pt-01-2021-u-b/Class/R_Analysis/01_Demo/15-2-Student_Resources")
sardines <- read.csv(file="../Resources/sardines.csv")
setwd("~/Documents/ucb-virt-data-pt-01-2021-u-b/Class/R_Analysis/01_Demo/15-2-Student_Resources")
sardines <- read.csv(file="../Resources/sardines.csv")
setwd("~/Documents/ucb-virt-data-pt-01-2021-u-b/Class/R_Analysis/01_Demo/15-2-Student_Resources/03-Stu_Sardines")
sardines <- read.csv(file="../Resources/sardines.csv")
setwd("~/Documents/ucb-virt-data-pt-01-2021-u-b/Class/R_Analysis/01_Demo/15-2-Student_Resources/03-Stu_Sardines/Resources")
sardines <- read.csv(file="../Resources/sardines.csv")
setwd("~/Documents/ucb-virt-data-pt-01-2021-u-b/Class/R_Analysis/01_Demo/15-2-Student_Resources/03-Stu_Sardines")
sardines <- read.csv(file="/Documents/ucb-virt-data-pt-01-2021-u-b/Class/R_Analysis/01_Demo/15-2-Student_Resources/03-Stu_Sardines/Resources/sardines.csv")
setwd("~/Documents/ucb-virt-data-pt-01-2021-u-b/Class/R_Analysis/01_Demo/15-2-Student_Resources")
sardines <- read.csv(file="15-2-Student_Resources/03-Stu_Sardines/Resources/sardines.csv")
setwd("~/Documents/ucb-virt-data-pt-01-2021-u-b/Class/R_Analysis/01_Demo")
sardines <- read.csv(file="15-2-Student_Resources/03-Stu_Sardines/Resources/sardines.csv")
View(demo_table)
View(demo_table2)
View(demo_table3)
View(filter_table2)
View(long_table)
View(model)
View(mpg_1999)
View(mpg_2008)
View(mpg_data)
View(mpg_long)
sardines <- read.csv(file="15-2-Student_Resources/03-Stu_Sardines/Resources/sardines.csv")
view(sardines)
# Calculate the population mean for Sardine Vertebrae in Alaska.
population1= subset(sardines, location == 1)
mean(population1[['vertebrae']])
# Hint: use the subset() function to get only the data for Alaska.
population2= subset(sardines, location == 6)
mean(population2[['vertebrae']])
# Calculate the population mean for Sardine Vertebrae in San Diego.
# Hint: use the subset() function to get only the data for San Diego.
# Calculate Independent (Two Sample) T-Test
t.test(population1[['vertebrae']], population2[['vertebrae']])
# Read in the CSV file.
hair <- read.csv(file="../Resources/hair.csv")
# Read in the CSV file.
hair <- read.csv(file="15-2-Student_Resources/05-Stu_ANOVA/Resources/hair.csv")
#  Plot the data using ggplot
ggplot(hair, aes(x=HairColor(y=Pain)))
ggplot(hair, aes(x=HairEyeColor, y=Pain))
plt + geom_point()
lm(qsec ~ mpg + disp + drat + wt + hp,data=hair)
one.way <- aov(yield ~ fertilizer, data = hair)
summary(one.way)
one.way <- aov(hair ~ pain, data = hair)
summary(one.way)
aov(hair ~ pain, data = hair)
View(hair)
#  Plot the data using ggplot
ggplot(hair, aes(x=HairColour, y=Pain))
plt + geom_point()
# Determine the p-value using ANOVA
aov(HairColour ~ Pain, data = hair)
ggplot(hair, aes(x=HairColour, y=Pain))
ggplot(hair, aes(x=Pain, y=HairColour))
ggplot(hair, aes(x=HairColour, y=Pain))
plt + geom_point()
aov(HairColour ~ Pain, data = hair)
ggplot(hair, aes(x=HairColour, y=Pain)) +
geom_point()
ggplot(hair, aes(x=HairColour, y=Pain)) +
geom_boxplot()
res.aov <- aov(HairColour ~ Pain, data = hair)
# Summary of the analysis
summary(res.aov)
summary(aov(Pain ~ HairColour, data = hair)
# Read in the CSV file.
hair <- read.csv(file="15-2-Student_Resources/05-Stu_ANOVA/Resources/hair.csv")
#  Plot the data using ggplot
ggplot(hair, aes(x=HairColour, y=Pain)) +
geom_boxplot()
# Determine the p-value using ANOVA
summary(aov(Pain ~ HairColour, data = hair)
summary(aov(Pain ~ HairColour, data=hair)
summary(aov(Pain ~ HairColour, data=hair)
summary(aov(Pain ~ HairColour, data=hair))
?aov
summary(aov(Pain~ HairColour, data=hair))
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
install.packages("dplyr")
library(dplyr)
setwd("~/Documents/ucb-virt-data-pt-01-2021-u-b/Class/MechaCar_Statistical_Analysis")
MechCar_data <- read.csv('MechaCar_mpg.csv')
View(MechCar_data)
lm('vehicle_length', 'vehicle_weight', 'spoiler_angle', 'ground_clearance', 'AWD', 'mpg')
lm('vehicle_length', 'vehicle_weight', 'spoiler_angle', 'ground_clearance', 'AWD', 'mpg', data= MechCar_data)
lm(vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, data= MechCar_data)
lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, data= MechCar_data)
summary(lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, data= MechCar_data))
lm(vehicle_length ~ mpg + spoiler_angle + ground_clearance + AWD + vehicle_weight, data= MechCar_data)
summary(lm(vehicle_length ~ mpg + spoiler_angle + ground_clearance + AWD + vehicle_weight, data= MechCar_data))
library(dplyr)
MechCar_data <- read.csv('MechaCar_mpg.csv')
lm(mpg ~ vehicle_length + spoiler_angle + ground_clearance + AWD + vehicle_weight, data= MechCar_data)
summary(lm(mpg ~ vehicle_length + spoiler_angle + ground_clearance + AWD + vehicle_weight, data= MechCar_data))
SuspensionCoil_data <- read.csv('Suspension_Coil.csv')
View(SuspensionCoil_data)
summarize(SuspensionCoil_data)
summarize(Mean_SuspensionCoil= mean(SuspensionCoil_data))
summarize(SuspensionCoil_data$PSI)
mean(SuspensionCoil_data$PSI)
summarize(mean(SuspensionCoil_data$PSI))
summarize(SuspensionCoil_data,
mean_PSI=mean(PSI))
summarize(SuspensionCoil_data,
mean_PSI=mean(PSI) +
median_PSI=(median(PSI) +
variance_PSI=var(PSI) +
SD_PSI=sd(PSI))
data %>% summarize(mean_psi = mean(PSI),
median_psi = (median(PSI),
variance_psi = var(PSI),
sd_psi = sd(PSI))
data <- read.csv('Suspension_Coil.csv')
data %>% summarize(mean_psi = mean(PSI),
median_psi = (median(PSI),
variance_psi = var(PSI),
sd_psi = sd(PSI))
#Deliverable 1
library(dplyr)
MechCar_data <- read.csv('MechaCar_mpg.csv')
lm(mpg ~ vehicle_length + spoiler_angle + ground_clearance + AWD + vehicle_weight, data= MechCar_data)
summary(lm(mpg ~ vehicle_length + spoiler_angle + ground_clearance + AWD + vehicle_weight, data= MechCar_data))
#Deliverable 2
SuspensionCoil_data <- read.csv('Suspension_Coil.csv')
summarize(mean_psi = mean(PSI),
median_psi = (median(PSI),
variance_psi = var(PSI),
sd_psi = sd(PSI))
#Deliverable 1
library(dplyr)
MechCar_data <- read.csv('MechaCar_mpg.csv')
lm(mpg ~ vehicle_length + spoiler_angle + ground_clearance + AWD + vehicle_weight, data= MechCar_data)
summary(lm(mpg ~ vehicle_length + spoiler_angle + ground_clearance + AWD + vehicle_weight, data= MechCar_data))
#Deliverable 2
SuspensionCoil_data <- read.csv('Suspension_Coil.csv')
summarize(mean_psi = mean(PSI),
median_psi = median(PSI),
variance_psi = var(PSI),
sd_psi = sd(PSI))
summarize(SuspensionCoil_data, mean_psi = mean(PSI),
median_psi = median(PSI),
variance_psi = var(PSI),
sd_psi = sd(PSI))
"%+%" <- function(x, y) paste0(x + y)
2 %+% 3
data.frame(summarize(SuspensionCoil_data, mean_psi = mean(PSI),
median_psi = median(PSI),
variance_psi = var(PSI),
sd_psi = sd(PSI)))
data.frame= (summarize(SuspensionCoil_data, mean_psi = mean(PSI),
median_psi = median(PSI),
variance_psi = var(PSI),
sd_psi = sd(PSI)))
print(data.frame)
View(data.frame)
View(data)
View(data.frame)
View(MechCar_data)
View(data.frame)
data.frame= (summarize(SuspensionCoil_data, Mean = mean(PSI),
Median = median(PSI),
Variance = var(PSI),
SD = sd(PSI)))
print(data.frame)
View(data.frame)
View(data)
View(data.frame)
View(data.frame)
total_summary= data.frame(summarize(SuspensionCoil_data, Mean = mean(PSI),
Median = median(PSI),
Variance = var(PSI),
SD = sd(PSI)))
View(total_summary)
lot_summary= summarize(SuspensionCoil_data, Mean = mean(PSI),
Median = median(PSI),
Variance = var(PSI),
SD = sd(PSI))
View(lot_summary)
group_by(SuspensionCoil_data$Manufacturing_Lot)
group_by(SuspensionCoil_data, Manufacturing_Lot)
Lots= group_by(SuspensionCoil_data, Manufacturing_Lot)
lot_summary= summarize(Lots, Mean = mean(Lot1))
by_lots<- group_by(SuspensionCoil_data, Manufacturing_Lot)
lot_summary= summarize(by_lots, Mean = mean(PSI)
lot_summary= summarize(by_lots, Mean = mean(PSI))
by_lots<- group_by(SuspensionCoil_data, Manufacturing_Lot)
lot_summary<- summarize(by_lots, Mean = mean(PSI))
View(lot_summary)
lot_summary<- summarize(by_lots, Mean = mean(PSI),
Median = median(PSI),
Variance = var(PSI),
SD = sd(PSI))
View(lot_summary)
View(by_lots)
View(data)
View(data.frame)
View(data.frame)
View(lot_summary)
View(Lots)
View(MechCar_data)
View(SuspensionCoil_data)
View(total_summary)
SuspensionCoil_data <- read.csv('Suspension_Coil.csv')
total_summary<- summarize(SuspensionCoil_data, Mean = mean(PSI),
Median = median(PSI),
Variance = var(PSI),
SD = sd(PSI))
by_lots<- group_by(SuspensionCoil_data, Manufacturing_Lot)
lot_summary<- summarize(by_lots, Mean = mean(PSI),
Median = median(PSI),
Variance = var(PSI),
SD = sd(PSI))
View(total_summary)
View(lot_summary)
t.test(SuspensionCoil_data, mu=1500, alternative="less", conf.level = 0.95)
t.test(PSI, mu=1500, alternative="less", conf.level = 0.95)
t.test(by_lots, mu=1500, alternative="less", conf.level = 0.95)
t.test(SuspensionCoil_data$PSI, mu=1500, alternative="less", conf.level = 0.95)
testlot1 <- t.test(SuspensionCoil_data$PSI, mu=1500, alternative="less", conf.level = 0.95, subset = Manufacturing_Lot == "Lot1")
View(testlot1)
testlot1 <- t.test(SuspensionCoil_data$PSI, mu=1500, alternative="less", conf.level = 0.95, subset = Manufacturing_Lot == "Lot1")
testlot2 <- t.test(SuspensionCoil_data$PSI, mu=1500, alternative="less", conf.level = 0.95, subset = Manufacturing_Lot == "Lot2")
testlot3 <- t.test(SuspensionCoil_data$PSI, mu=1500, alternative="less", conf.level = 0.95, subset = Manufacturing_Lot == "Lot3")
View(testlot1)
View(testlot2)
View(testlot3)
View(testlot2)
View(testlot1)
t.test(SuspensionCoil_data$PSI, mu=1500, conf.level = 0.95)
testlot3 <- t.test(SuspensionCoil_data$PSI, subset = Manufacturing_Lot == "Lot3", mu=1500, conf.level = 0.95)
View(testlot3)
View(testlot2)
View(testlot3)
View(testlot2)
View(testlot3)
View(testlot2)
View(testlot1)
testlot3 <- t.test(SuspensionCoil_data$PSI$Lot3, subset = Manufacturing_Lot == "Lot3", mu=1500, conf.level = 0.95)
testlot3 <- t.test(SuspensionCoil_data$PSI, mu=1500, conf.level = 0.95) + subset(Manufacturing_Lot == "Lot3")
testlot3 <- t.test(SuspensionCoil_data$PSI, mu=1500, conf.level = 0.95) + subset(SuspensionCoil_data, Manufacturing_Lot == "Lot3")
View(testlot3)
testlot1 <- t.test(SuspensionCoil_data$PSI, mu=1500, conf.level = 0.95) + subset(SuspensionCoil_data, Manufacturing_Lot == "Lot1")
testlot2 <- t.test(SuspensionCoil_data$PSI, mu=1500, conf.level = 0.95) + subset(SuspensionCoil_data, Manufacturing_Lot == "Lot2")
testlot3 <- t.test(SuspensionCoil_data$PSI, mu=1500, conf.level = 0.95) + subset(SuspensionCoil_data, Manufacturing_Lot == "Lot3")
View(testlot1)
View(testlot2)
View(testlot3)
View(testlot2)
View(testlot3)
View(testlot2)
View(testlot1)
View(testlot1)
View(testlot1)
View(testlot2)
View(testlot2)
subset(SuspensionCoil_data, Manufacturing_Lot == "Lot1")
testlot3 <- t.test(subset(SuspensionCoil_data, Manufacturing_Lot == "Lot1"), mu=1500, conf.level = 0.95) + subset(SuspensionCoil_data, Manufacturing_Lot == "Lot3")
View(testlot3)
testlot3 <- t.test(subset(SuspensionCoil_data, Manufacturing_Lot == "Lot1"), mu=1500, conf.level = 0.95)
subset(SuspensionCoil_data, Manufacturing_Lot == "Lot1")
Lot1<- subset(SuspensionCoil_data, Manufacturing_Lot == "Lot1")
Lot2<- subset(SuspensionCoil_data, Manufacturing_Lot == "Lot2")
Lot3<- subset(SuspensionCoil_data, Manufacturing_Lot == "Lot3")
View(Lot1)
View(Lot2)
View(Lot3)
testlot1 <- t.test(Lot1$PSI, mu=1500, conf.level = 0.95)
testlot2 <- t.test(Lot2$PSI, mu=1500, conf.level = 0.95)
testlot3 <- t.test(Lot3$PSI, mu=1500, conf.level = 0.95)
View(testlot1)
View(testlot2)
View(testlot3)
MechCar_data <- read.csv('MechaCar_mpg.csv')
View(MechCar_data)
